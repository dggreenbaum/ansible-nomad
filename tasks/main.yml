---
# File: tasks/main.yml - Main tasks for nomad

- name: Check distribution compatibility
  fail:
    msg: "{{ ansible_distribution }} is not supported by this role"
  when: ansible_distribution not in ['RedHat', 'CentOS', 'Debian', 'Ubuntu']

- name: Fail if not a new release of Red Hat / CentOS
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution in ['RedHat', 'CentOS'] and ansible_distribution_version|version_compare(6, '<')

- name: Fail if not a new release of Debian
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution == "Debian" and ansible_distribution_version|version_compare(8.5, '<')

- name: Fail if not a new release of Ubuntu
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version|version_compare(13.04, '<')

- name: Create cluster groupings
  group_by: key={{ nomad_node_role }}

- group_by: key=os_{{ ansible_os_family }}

- name: "Add nomad user"
  user: name=nomad comment="nomad user" uid=1047 group=bin

- name: "Add nomad user to docker group"
  user: name=nomad groups=docker append=yes
  when: nomad_enable_docker == "true"

# Include variables and define needed variables.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install specified packages
  include: install.yml

- name: Disable SELinux (RHEL)
  include: selinux.yml
  when: ansible_os_family == "RedHat"

- name: Directories
  file: "dest={{ item }} state=directory owner={{ nomad_user }} group={{ nomad_group}}"
  with_items:
    - /opt/nomad
    - /var/nomad
    - /var/run/nomad
    - /etc/nomad.d

- name: Check bootstrapped state
  stat: path=/etc/nomad/.nomad_bootstrapped
  register: bootstrap_marker
  ignore_errors: true

- block:
    - name: Look for an existing encryption key on a previously boostrapped server
      shell: 'cat {{ nomad_config_dir }}/base.hcl | grep "encrypt" | sed -E ''s/"encrypt": "(.+)",?/\1/'' | sed ''s/^ *//;s/ *$//'''
      register: nomad_key_read
      run_once: true

    - name: Save encryption key (from existing config)
      set_fact: nomad_raw_key={{ nomad_key_read.stdout }}
  when: nomad_raw_key is not defined and bootstrap_marker.stat.exists

- name: Writing key locally to share with other servers that are new
  local_action: copy content={{ nomad_raw_key }} dest=/tmp/nomad_raw.key
  become: no
  when: nomad_raw_key is defined and not bootstrap_marker.stat.exists

- name: Reading key for servers that are missing it
  set_fact: nomad_raw_key="{{ lookup('file', '/tmp/nomad_raw.key') }}"
  when: nomad_raw_key is not defined and bootstrap_marker.stat.exists

- block:
    - name: Generate gossip encryption key
      shell: "PATH={{ nomad_bin_dir }}:$PATH nomad keygen"
      register: nomad_keygen
      run_once: true

    - name: Save encryption key
      set_fact: nomad_raw_key={{ nomad_keygen.stdout }}
  when: nomad_raw_key is not defined and not bootstrap_marker.stat.exists

- name: Base configuration
  template: src=base.hcl.j2 dest={{ nomad_config_dir }}/base.hcl
  notify:
    - restart nomad

- name: Bootstrap server configuration
  template: src=bootstrap.hcl.j2 dest={{ nomad_config_dir }}/bootstrap.hcl
  notify:
    - restart nomad

- name: Server configuration
  template: src=server.hcl.j2 dest={{ nomad_config_dir }}/server.hcl
  notify:
    - restart nomad

- name: Client configuration
  template: src=client.hcl.j2 dest={{ nomad_config_dir }}/client.hcl
  notify:
    - restart nomad

- name: SYSV init script
  template: src=nomad_sysvinit.j2 dest=/etc/init.d/nomad owner=root group=root mode=755
  when: not ansible_distribution == "Debian"
  notify:
    - restart nomad

- name: Debian init script
  template: src=nomad_debian.init.j2 dest=/etc/init.d/nomad owner=root group=root mode=755
  when: ansible_distribution == "Debian" and ansible_distribution_major_version|int <= 7
  notify:
    - restart nomad

- name: systemd script
  template: src=nomad_systemd.service.j2 dest=/lib/systemd/system/nomad.service owner=root group=root mode=644
  when: ansible_distribution_major_version|int >= 7
  notify:
    - restart nomad

- include: ../tasks/tls.yml
  when: nomad_tls_enable

- name: Start Nomad
  service: name=nomad state=started

- name: Bootstrapped marker
  file: dest=/etc/nomad.d/.nomad_bootstrapped state=touch
